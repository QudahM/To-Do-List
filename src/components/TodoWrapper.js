import React, { useState } from 'react' // UseState is a React Hook 
import { v4 as uuidv4 } from 'uuid'
import { TodoForm } from './TodoForm'
import { Todo } from './Todo'
import { EditTodoForm } from './EditTodoForm'

uuidv4()

export const TodoWrapper = () => {
    const [todos, setTodos] = useState([]) // It allows me to add state to a functional component (TodoWrapper)
                                           /* It returns an array with two values the current state (todos) & 
                                           a function to update (setTodos) */

    const addTodo = todo => { // Creating a new function called addTodo with a single parameter called todo
        // The (...) is a spread operator that creates a new array with the exisiting todos and a new todo object
        setTodos([...todos, { id: uuidv4(), task: todo, completed: false, isEditing: false}])
        /* The new todo object contains id that generated by uuidv4. Task contains the new todo object, 
        Completed is false so the new object won't be saved as a completed task as soon as it's been created,
        isEditing is false so the editing page won't open as soon as a new todo is created*/
        updateHeight();
    }

    const toggleComplete = id => { // Function: toggleComplete. Parameter: id
        setTodos(todos.map(todo => todo.id === id ? { ...todo, completed: !todo.completed } : todo))
        updateHeight();
    }

    const deleteTodo = id => { // Function: deleteTodo. Parameter: id
        setTodos(todos.filter(todo => todo.id !== id))
        updateHeight();
    }

    const editTodo = id => { // Function: editTodo. Parameter: id
        setTodos(todos.map(todo => todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo))
        updateHeight();
    }

    const editTask = (task, id) => { // Function: editTask. Parameter: task, id
        setTodos(todos.map(todo => todo.id === id ? { ...todo, task, isEditing: !todo.isEditing } : todo))
        updateHeight();
    }

    const updateHeight = () => {
        const todoWrapper = document.querySelector('.TodoWrapper');
        if (todoWrapper) {
            const originalHeight = parseInt(window.getComputedStyle(todoWrapper).getPropertyValue('min-height'));
            const contentHeight = todoWrapper.scrollHeight;
            const newHeight = Math.max(originalHeight, contentHeight);
            todoWrapper.style.minHeight = newHeight + 'px';
        }
    }
    return (
        <div className='TodoWrapper' id='TodoWrapper'>
            <h1>Tasks To Work On!</h1>
            <TodoForm addTodo={addTodo}/>
            {todos.map((todo) => (todo.isEditing ? (
                <EditTodoForm editTodo={editTask} task={todo} />
            ) : (
                <Todo task={todo} key={todo.id}
                    toggleComplete={toggleComplete} deleteTodo={deleteTodo}
                    editTodo={editTodo} />
            )
            ))}

        </div>
    )
}
